import pygame
import os


from mksServoCan.mks_servo import *
from mksServoCan.mks_enums import *
import can

from helper import *
from defines import *


    

os.environ['SDL_JOYSTICK_HIDAPI_PS5_RUMBLE'] = '1'
pygame.init()

joystick_1_value = 0
joystick_2_value = 0 
joystick_3_value = 0
joystick_4_value = 0

joystick_min = -1
joystick_max = 1
joystick_dead_zone = 0.2

def value2pct(value):
    if abs(value) < joystick_dead_zone:
        return 0
    if value > 0:
        return abs(round(min(1, (value-joystick_dead_zone)/(joystick_max-joystick_dead_zone)),3))
    if value < 0:
        return abs(round(max(-1, -(value+joystick_dead_zone)/(joystick_min+joystick_dead_zone)),3))
    if value == 0:
        return 0
    
    
def main():
    
    controlBus = can.interface.Bus(
    bustype="slcan", channel="/dev/tty.usbmodem206A38584D4D1", bitrate=500000)
    notifier = can.Notifier(controlBus, [])

    servos = {}
    axis_map = [X, Y, Z, A, B, C]

    for id, axis in enumerate(axis_map):
        servos[axis] = MksServo(controlBus, notifier, id+1)

    screen = pygame.display.set_mode((500, 300))
    pygame.display.set_caption("Arctos Controller")
    clock = pygame.time.Clock()
    joysticks = {}
    done = False
    
    cnt = 1

    while not done:
      
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                done = True

            if event.type == pygame.JOYBUTTONDOWN:
                print("Joystick button pressed.")
                joystick.rumble(10, 11, 500)

            if event.type == pygame.JOYBUTTONUP:
                print("Joystick button released.")

            if event.type == pygame.JOYDEVICEADDED:
                joy = pygame.joystick.Joystick(event.device_index)
                joysticks[joy.get_instance_id()] = joy
                print(f"Joystick {joy.get_instance_id()} connencted")

            if event.type == pygame.JOYDEVICEREMOVED:
                del joysticks[event.instance_id]
                print(f"Joystick {event.instance_id} disconnected")


        # For each joystick:
        
        for joystick in joysticks.values():   
              
 
            joystick_1_value = joystick.get_axis(0)
            joystick_2_value = joystick.get_axis(1)
            joystick_3_value = joystick.get_axis(2)
            joystick_4_value = joystick.get_axis(3)
            print(joystick_4_value)
            
            screen.fill((0,0,0))
            
            if True:
                t = time.time()
                if joystick_1_value < 0:
                    servos[X].run_motor_in_speed_mode(Direction.CCW, int(value2pct(joystick_1_value)*500), 200)
                elif joystick_1_value > 0:
                    servos[X].run_motor_in_speed_mode(Direction.CW, int(value2pct(joystick_1_value)*500), 200)
                else:
                    servos[X].run_motor_in_speed_mode(Direction.CCW, 0, 100)
                cnt = 2
                print(time.time()-t)
            
            if True:    
                if joystick_2_value < 0:
                    servos[Y].run_motor_in_speed_mode(Direction.CW, int(value2pct(joystick_2_value)*500), 255)
                elif joystick_2_value > 0:
                    servos[Y].run_motor_in_speed_mode(Direction.CCW, int(value2pct(joystick_2_value)*500), 255)
                else:
                    servos[Y].run_motor_in_speed_mode(Direction.CCW, 0, 200)
                cnt = 3
            if True:
                if joystick_4_value < 0:
                    servos[Z].run_motor_in_speed_mode(Direction.CCW, int(value2pct(joystick_4_value)*500), 255)
                elif joystick_4_value > 0:
                    servos[Z].run_motor_in_speed_mode(Direction.CW, int(value2pct(joystick_4_value)*500), 255)
                else:
                    servos[Z].run_motor_in_speed_mode(Direction.CCW, 0, 0)
                cnt = 1

            pygame.draw.circle(screen, "gray", [120, 150], 120)
            pygame.draw.circle(screen, "gray", [380, 150], 120)
            pygame.draw.circle(screen, "red", [120+120*value2pct(joystick_1_value), 150+120*value2pct(joystick_2_value)], 10)
            pygame.draw.circle(screen, "green", [380+120*value2pct(joystick_3_value), 150+120*value2pct(joystick_4_value)], 10)


        pygame.display.flip()
        clock.tick(30)


if __name__ == "__main__":
    main()
    pygame.quit()